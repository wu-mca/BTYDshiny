res1 <- (muhat_x-mu_0)/(sigmahat_x/sqrt(n_x))
ifelse(abs(res1)>qt(1-alpha/2,df=n_x-1),"Es gibt den Unterschied","Es gibt keinen Unterschied")
?qt
res1 <- (muhat_x-mu_0)/(sigmahat_x/sqrt(n_x))
ifelse(abs(res1)>qt(1-alpha/2,df=n_x-1),"Es gibt den Unterschied","Es gibt keinen Unterschied")
res2 <- t.test(x,alternative="two.sided",mu=mu_0,conf.level=1-alpha)
ifelse(res2 $p.value<=alpha,"Es gibt den Unterschied","Es gibt keinen Unterschied")
#d)
n_y <- 50
mu_y <- 0
sigma_y <- 2
y <- rnorm(n_y,mu_y,sigma_y)
muhat_y <- mean(y)
sigmahat_y <- sd(y)
#selbstständig
var_apr <- ((n_x-1)*sigmahat_x^2+(n_y-1)*sigmahat_y^2)/(n_x+n_y-2)
res3 <- (muhat_x-muhat_y)/sqrt(var_apr*(1/n_x + 1/n_y))
ifelse(abs(res3)>qt(1-alpha/2,df=n_x+n_y-2),"Es gibt den Unterschied","Es gibt keinen Unterschied")
# t.test-Funktion
res4 <- t.test(x,y,alternative="two.sided",conf.level=1-alpha)
ifelse(res4 $p.value<=alpha,"Es gibt den Unterschied","Es gibt keinen Unterschied")
hoch_1 <- JahrMonatTag_temp[order(temp,decreasing = TRUE)][1]
hoch_2 <- JahrMonatTag_temp[order(temp,decreasing = TRUE)][2]
ifelse(hoch_1 == hoch_2,paste("Die hoechste und zweithoechste Temperatur wurden am",hoch_1,'gemessen' ),paste("Die hoechste Temperatur wurde am",hoch_1,'gemessen',' und zweithoechste Temperatur wurde am',hoch_2,'gemessen'))
200000/50
200000/50
300000/50
300000/70
20 + 20 + 15
20 + 20  +15
20 + 20  +15  +12
20 + 20 + 10 + 10
20 + 20 + 18 + 12
4*3
ngeschwister <- c(0, 1, 0, 1, 6, 5, 2, 0)
ngeschwister
tab.geschwister <- table(ngeschwister)
tab.geschwister
tab.geschwister.voll <- rep(0, max(ngeschwister) + 1)
tab.geschwister.voll
names(tab.geschwister.voll) <- 0:max(ngeschwister)
tab.geschwister.voll
tab.geschwister.voll[names(tab.geschwister)] <- tab.geschwister
tab.geschwister.voll
tab.geschwister.voll <- rep(0, max(ngeschwister) + 1)
names(tab.geschwister.voll) <- 0:max(ngeschwister)
tab.geschwister.voll
tab.geschwister.voll <- tab.geschwister.voll[tab.geschwister]
tab.geschwister.voll
A <- matrix(c(1,2,3,4,5,6))
A
solve(A)
det(A)
A <- matrix(c(1,1,1,2,2,2,3,5,4))
A
A <- matrix(c(1,1,1,2,2,2,3,5,4),nrow = 3,)
A
det(A)
solve(A)
x <- rnorm(50, 1, 2)
y <- rnorm(50,0, 1)
test <- unclass(t.test(x, y))
test
new_list <- list(T_Statistik = test$statistic,DF = test$parameter,p_value = test$p.value)
new_list
new_vector <-unlist(new_list)
new_vector
t.test.vector <- unlist(t.test.neu)
names(t.test.vector) <- names(t.test.neu)
t.test.vector
x.n <- 50
x.mu <- 1
x.sigma <- 2
y.n <- 50
y.mu <- 0
y.sigma <- 2
x <- rnorm(x.n, mean = x.mu, sd = x.sigma)
y <- rnorm(y.n, mean = y.mu, sd = y.sigma)
t.test.objekt <- unclass(t.test(x, y))
# a) Teste ob das Objekt eine Liste ist
is.recursive(t.test.objekt) & is.vector(t.test.objekt)
# b) ERstelle eine neue Liste mit der T-Statistik, den Freiheitsgraden und dem P-Wert
t.test.neu <- list(T.Statistik = t.test.objekt$statistic,
Freiheitsgrade = t.test.objekt$parameter,
P.Wert = t.test.objekt$p.value)
t.test.neu
# c) Erstelle einen Vektor mti der T-Statistik, den Freiheitsgraden und dem P-Wert und vergib eentspr. Namen
t.test.vector <- unlist(t.test.neu)
names(t.test.vector) <- names(t.test.neu)
t.test.vector
load("temp.RDATA")
load("C:/Users/Daniil/Desktop/Учеба Венский университет/Статистика/3 semester/Statistical Programming/week 1/temp.RDATA")
load("temp.RDATA")
# a) In Matrix umwandlen -> Temperaturen eines Tages in einer Zeile
temp.matrix <- matrix(temp, ncol = 24, byrow = TRUE)
temp.matrix
# b) Datum im Format TT.MM. als Zeilenname, Uhrzeit als Spaltenname
colnames(temp.matrix) <- paste0(1:24, ":00")
rownames(temp.matrix) <- c(paste0("0", 1:9, ".07."), paste0(10:31, ".07."),
paste0("0", 1:9, ".08."), paste0(10:31, ".08."),
paste0("0", 1:9, ".09."), paste0(10:26, ".09."))
temp.matrix
month <- c("July","August","September")
days <- 1:31
month_data <- rep(month,each = 31,length.out = nrow(data_3))
Tag_temp <- rep(1:31,length.out = nrow(data_3))
rownames(data_3) <- paste(Tag_temp,month_data,sep = '.')
colnames(data_3) <- 1:24
data_3 <- matrix(temp,ncol = 24,byrow = TRUE)
#b)
month <- c("July","August","September")
days <- 1:31
month_data <- rep(month,each = 31,length.out = nrow(data_3))
Tag_temp <- rep(1:31,length.out = nrow(data_3))
rownames(data_3) <- paste(Tag_temp,month_data,sep = '.')
colnames(data_3) <- 1:24
data_3
temp.matrix
data_3
head(temp.matrix)
colnames(data_3) <- paste(1:24,'00',sep = ':')
colnames(data_3) <- paste(1:24,'00',sep = ':')
head(data_3)
gregexpr(pattern = '[дць]',ignore.case = TRUE,s)
#a)
load(file="s.RData")
load("C:/Users/Daniil/Desktop/Учеба Венский университет/Статистика/3 semester/Statistical Programming/week 2/s.RDATA")
uml <- sum(gregexpr(pattern = '[дць]',ignore.case = TRUE,s)[[1]]>0)
uml <- length(gregexpr(pattern = '[дць]',ignore.case = TRUE,s)[[1]])
uml <- length(gregexpr(pattern = '[дць]',ignore.case = TRUE,s)[[1]])
uml <- length(gregexpr(pattern = '[дць]',ignore.case = TRUE,s)[[1]])
uml <- length(gregexpr(pattern = '[дць]',ignore.case = TRUE,s)[[1]])
uml <- length(gregexpr(pattern = '[дць]',ignore.case = TRUE,s)[[1]])
uml <- length(gregexpr(pattern = '[дць]',ignore.case = TRUE,s)[[1]])
uml <- length(gregexpr(pattern = '[дць]',ignore.case = TRUE,s)[[1]])
uml <- length(gregexpr(pattern = '[дць]',ignore.case = TRUE,s)[[1]])
s.Beispiele.pattern <- "(\\\n[a-z][)] )|(\\\n[1-9][.] a[)] )"
index.Unterpunkt.Anfang <- gregexpr(pattern = s.Beispiele.pattern, s)[[1]]
index.Unterpunkt.Anfang
index.Unterpunkt.Ende <- c(index.Unterpunkt.Anfang[-1]-1, nchar(s))
s.Beispiele <- substring(s, first = index.Unterpunkt.Anfang, last = index.Unterpunkt.Ende)
# Bereinigen
s.Beispiele <- sub(pattern = s.Beispiele.pattern, replacement = "", s.Beispiele)
names(s.Beispiele) <- c(paste0("1", letters[1:15]), paste0("2", letters[1:4]))
s.Beispiele
matrix(c(1,2,3,5))
matrix(c(1,2,3,5),nrow = 2)
a <-matrix(c(1,2,3,5),nrow = 2)
b <- c(1,2)
a%*%b
load("C:/Users/Daniil/Desktop/Учеба Венский университет/Статистика/3 semester/Statistical Programming/week 2/s.RDATA")
s.Beispiele.pattern <- "(\\n[a-z][)] )|(\\n[1-9][.] a[)] )"
index.Unterpunkt.Anfang <- gregexpr(pattern = s.Beispiele.pattern, s)[[1]]
index.Unterpunkt.Anfang
index.Unterpunkt.Ende <- c(index.Unterpunkt.Anfang[-1]-1, nchar(s))
s.Beispiele <- substring(s, first = index.Unterpunkt.Anfang, last = index.Unterpunkt.Ende)
# Bereinigen
s.Beispiele <- sub(pattern = s.Beispiele.pattern, replacement = "", s.Beispiele)
names(s.Beispiele) <- c(paste0("1", letters[1:15]), paste0("2", letters[1:4]))
s.Beispiele
s.Beispiele.pattern <- "(\\\n[a-z][)] )|(\\\n[1-9][.] a[)] )"
index.Unterpunkt.Anfang <- gregexpr(pattern = s.Beispiele.pattern, s)[[1]]
index.Unterpunkt.Anfang
index.Unterpunkt.Ende <- c(index.Unterpunkt.Anfang[-1]-1, nchar(s))
s.Beispiele <- substring(s, first = index.Unterpunkt.Anfang, last = index.Unterpunkt.Ende)
# Bereinigen
s.Beispiele <- sub(pattern = s.Beispiele.pattern, replacement = "", s.Beispiele)
names(s.Beispiele) <- c(paste0("1", letters[1:15]), paste0("2", letters[1:4]))
s.Beispiele
s.Beispiele.pattern <- "(\\\n[a-z][)] )|(\\\n[1-9][.] a[)] )"
index.Unterpunkt.Anfang <- gregexpr(pattern = s.Beispiele.pattern, s)[[1]]
index.Unterpunkt.Anfang
s.Beispiele <- substring(s, first = index.Unterpunkt.Anfang, last = index.Unterpunkt.Ende)
s.Beispiele.pattern <- "(\\\n[a-z][)] )|(\\\n[1-9][.] a[)] )"
index.Unterpunkt.Anfang <- gregexpr(pattern = s.Beispiele.pattern, s)[[1]]
index.Unterpunkt.Anfang
index.Unterpunkt.Ende <- c(index.Unterpunkt.Anfang[-1]-1, nchar(s))
s.Beispiele <- substring(s, first = index.Unterpunkt.Anfang, last = index.Unterpunkt.Ende)
s.Beispiele
s.Beispiele.pattern <- "(\\\n[a-z][)] )|(\\\n[1-9][.] a[)] )"
index.Unterpunkt.Anfang <- gregexpr(pattern = s.Beispiele.pattern, s)[[1]]
index.Unterpunkt.Anfang
index.Unterpunkt.Ende <- c(index.Unterpunkt.Anfang[-1]-1, nchar(s))
s.Beispiele <- substring(s, first = index.Unterpunkt.Anfang, last = index.Unterpunkt.Ende)
# Bereinigen
s.Beispiele <- gsub(pattern = s.Beispiele.pattern, replacement = "", s.Beispiele)
names(s.Beispiele) <- c(paste0("1", letters[1:15]), paste0("2", letters[1:4]))
s.Beispiele
ex <- "(\\n[a-z][)] )|(\\n[1-9][.] a[)] )"
ind_1 <- gregexpr(pattern = ex, s)[[1]]
ind_2 <- c(index.Unterpunkt.Anfang[-1]-1, nchar(s))
new_s <- substring(s, first = ind_1, last = ind_2)
f <- gsub(pattern = ex, replacement = "", new_s)
names(f) <- c(paste0("1", letters[1:15]), paste0("2", letters[1:4]))
f
810000000000 * 0.02
81000000000 * 0.02
8100000000 * 0.02
810000000 * 0.02
install.packages("shiny")
a <- 'asdasdad'
nchar(a)
?srtsplit
?strsplit
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
x
strsplit(x, "e")
IQ <- rnorm(50,100,15)
cut(IQ,breaks = c(-1,0,1))
rnorm
IQ
cut(IQ,breaks = c(80,100,120))
cut(IQ,breaks = c(70,100,120))
cut(IQ,breaks = c(50,100,120))
min(IQ)
IQ
cut(IQ,breaks = c(50,100,150))
load("C:/Users/Daniil/Desktop/Учеба Венский университет/Статистика/3 semester/Statistical Programming/week 2/U2.RData")
objekte <- load("U2.RData")
head(anagen,n=3)
head(ansagen,n=3)
?paste
?sapplt
?sapply
regexpr('\\.',ansagen)
regexpr('\.',ansagen)
regexpr('\\.',ansagen)
regexpr('[.]',ansagen)
regexpr("\\.", ansagen)
gregexpr("\\.", ansagen)
gregexpr("\\.", ansagen)[[1]]
gregexpr("\\.", ansagen)[1]
grep("[aeiou][aeiou][aeiou]", stationen,ingore.case = TRUE,value = TRUE)
grep("[aeiou][aeiou][aeiou]", stationen,ignore.case = TRUE,value = TRUE)
grep("[aeiou][aeiou][aeiou]", stationen,ignore.case = TRUE)
stationen.vokale3<-grep("[aeiou][aeiou][aeiou]", stationen,ignore.case = TRUE,value = TRUE)
grep("[aeiou]{3,}", stationen,ignore.case = TRUE,value = TRUE)
grep("[aeiou]{2,}", stationen,ignore.case = TRUE,value = TRUE)
vokale <- c("a", "e", "i", "o", "u")
temp <- paste0(vokale, vokale, collapse = "|")
paste0(vokale, vokale, collapse = "|")
paste0(vokale, vokale, collapse = ".")
paste0(vokale, vokale, sep = '|')
paste0(letters, letters)
gregexpr(pattern = "[0-9]+[AB]", umstieg.aspernstrasse)[[1]]
umstieg.aspernstrasse <- umstieg[stationen == "Aspernstrasse"]
gregexpr(pattern = "[0-9]+[AB]", umstieg.aspernstrasse)[[1]]
gregexpr(pattern = "[0-9]+[AB]", umstieg.aspernstrasse)
gregexpr(pattern = "[0-9]+[AB]", umstieg.aspernstrasse)[[1]]
bool <- grepl("2", umstieg)
bool
umstieg
> bool <- grepl("[^0-9]2,", umstieg)
bool <- grepl("[^0-9]2,", umstieg)
umstieg[bool]
names(umstieg) <- stationen
expr <- "[^0-9]2,|^2$|^2,|"
bool <- grepl(expr, umstieg)
umstieg[bool]
> expr <- "[^0-9]2,|^2$|^2,|[^0-9]2$"
expr <- "[^0-9]2,|^2$|^2,|[^0-9]2$"
bool <- grepl(expr, umstieg)
umstieg[bool]
rechnungen <- c("8-1=7, 9 + 10 = 19, 2 - 5 = -3,11^2 = 121")
grep(pattern = '+')
grep(pattern = '+',rechnungen)
grepl(pattern = '+',rechnungen)
regexpr(pattern = '+',rechnungen)
grepl(pattern = '=[^-][0-9]')
grepl(pattern = '=[^-][0-9]',rechnungen)
regexpr(pattern = '=[^-][0-9]',rechnungen)
gregexpr(pattern = '=[^-][0-9]',rechnungen)
gregexpr(pattern ="\\+",rechnungen)
sum(unlist(gregexpr("\\+", rechnungen)) > 0)
unlist(gregexpr(pattern ="\\+",rechnungen))
zeichen <- unlist(strsplit(rechnungen, split = ""))
zeichen
strsplit(rechnungen,split = "")
unlist(strsplit(rechnungen,split = ""))
grep(pattern = "\\+",unlist(strsplit(rechnungen,split = ""))
grep(pattern = "\\+",unlist(strsplit(rechnungen,split = "")))
zeichnen <- unlist(strsplit(rechnungen,split = ""))
sum(3:5 %in% zeichnen)
zeichen <- unlist(strsplit(rechnungen, split = ""))
sum(zeichen %in% 3:5)
gregexpr(pattern = '=[^-][0-9]',rechnungen)
gregexpr("= *[0-9]+", rechnungen)[[1]]
sum(gregexpr("= *[0-9]+", rechnungen)[[1]] > 0)
gregexpr(pattern = '= [^-][0-9]',rechnungen)
gregexpr(pattern = '=[0-9]',rechnungen)
gregexpr(pattern = '=[0-9]',rechnungen)
gregexpr(pattern = '= [0-9]',rechnungen)
gregexpr(pattern = '= [0-9]*',rechnungen)
gregexpr(pattern = '= +[0-9]*',rechnungen)
sum(gregexpr("= *[0-9]+", rechnungen)[[1]] > 0)
gregexpr("= *[0-9]+", rechnungen)[[1]]
sum(gregexpr("= *[0-9]+", rechnungen)[[1]] > 0)
gregexpr("= [0-9]+", rechnungen)[[1]]
gregexpr("= *[0-9]+", rechnungen)[[1]]
gregexpr(pattern = ' = *1[^0-9.]',rechungen)
gregexpr(pattern = ' = *1[^0-9.]',rechnungen)
gregexpr("= *1[^0-9.]", rechnungen)
gregexpr("= *1[^0-9]", rechnungen)
temp <- paste(seq(10, 20, by = 2), collapse = "|")
temp
gregexpr(temp,rechnungen)
gregexpr(temp, rechnungen)[[1]]
temp <- paste0("[^0-9]", seq(10, 20, by = 2), "[^0-9]", collapse = "|")
temp
expr <- "D|O|WLB|^[0-9]+$|^[0-9]+,|[^U][0-9]+$|,[0-9]+,"
bool <- grepl(expr, umstieg)
bool
stationen[!bool]
Stud <- data.frame(Nr = 1:4, Name = c("Fritz", "Gerda", "Hubert",
"Isabella"), stringsAsFactors = FALSE)
LV <- data.frame(Nr = 11:14, Titel = c("Lineare Modelle",
"Statistisches Programmieren", "Analysis", "Spieltheorie"),
stringsAsFactors = FALSE)
Besuch <- data.frame(Student = c(1, 2, 2, 4, 4), LV = c(12, 11, 12, 12, 13))
temp <- merge(Besuch, LV, all.x = TRUE, by.x = "LV", by.y = "Nr")
temp
d <- merge(Besuch,LV,by.x = 'LV',by.y = 'Nr')
unique(d$Titel)
d
temp
unique(temp$Titel)
LV$Titel[LV$Nr %in% unique(Besuch$LV)]
LV$Titel[LV$Nr%in% Besuch$LV ]
d <- merge(Stud,Besuch,by.x = "Nr",by.y = "Student",all = TRUE)
temp <- merge(Stud, Besuch, all = FALSE, by.x = "Nr", by.y = "Student")
temp
d
tab.alt <- table(temp$Name)
tab.alt
tab.neu <- rep(0, nrow(Stud))
names(tab.neu) <- Stud$Name
tab.neu
tab.neu <- rep(0, nrow(Stud))
names(tab.neu) <- Stud$Name
tab.neu
tab.neu
tab.alt
temp <- merge(Stud, Besuch, all = FALSE, by.x = "Nr", by.y = "Student")
temp
temp <- merge(Stud, Besuch,  by.x = "Nr", by.y = "Student")
temp
tab.alt <- table(temp$Name)
tab.alt
tab.neu <- rep(0, nrow(Stud))
names(tab.neu) <- Stud$Name
tab.neu
tab.neu <- rep(0, nrow(Stud))
tab.neu
tab.neu <- rep(0, nrow(Stud))
names(tab.neu) <- Stud$Name
tab.neu
tab.neu
names(tab.alt)
tab.neu[names(tab.alt)] <- tab.alt
tab.neu
d <- merge(Stud,Besuch,by.x = "Nr",by.y = "Student",all = TRUE)
d$Name <- NULL
t <- table(d)
t
temp$Name
tab <- table(c(temp$Name, Stud$Name))
tab
tab - 1
?cut
alter <- sample(18:80, size = n, replace = TRUE)
iq <- rnorm(n, mean = 100, sd = 15)
# b)
alter.cut <- cut(alter, breaks = c(-Inf, 30, 65, Inf),
labels = c("Jung", "Mittel", "Weise"))
alter.cut
# Achtung: Ordinalskalierung ist sauber!
alter.cut <- as.ordered(alter.cut)
alter.cut
# Ordinalskalierung in cut() mittels ordered_result
iq.cut <- cut(iq, breaks = c(-Inf, 85, 115, Inf),
labels = c("Gering", "Mittel", "Hoch"), ordered_result = TRUE)
iq.cut
# c)
tab <- table(alter.cut, iq.cut)
tab
sum(tab == 0)
levels(alter.cut)[levels(alter.cut) == "Jung"] <- "Mittel"
alter.cut
n <- 50
set.seed(123)
# a)
alter <- sample(18:80, size = n, replace = TRUE)
iq <- rnorm(n, mean = 100, sd = 15)
# b)
alter.cut <- cut(alter, breaks = c(-Inf, 30, 65, Inf),
labels = c("Jung", "Mittel", "Weise"))
alter.cut
# Achtung: Ordinalskalierung ist sauber!
alter.cut <- as.ordered(alter.cut)
alter.cut
# Ordinalskalierung in cut() mittels ordered_result
iq.cut <- cut(iq, breaks = c(-Inf, 85, 115, Inf),
labels = c("Gering", "Mittel", "Hoch"), ordered_result = TRUE)
iq.cut
# c)
tab <- table(alter.cut, iq.cut)
tab
sum(tab == 0)
levels(alter.cut)[levels(alter.cut) == "Jung"] <- "Mittel"
alter.cut
levels(alter.cut) <- c("ErwerbstГ¤tiger", "Pensionist")
alter.cut
faktor1 <- factor(faktor, ordered = TRUE)
faktor1
?strsplit
S <- matrix(0, ncol = 8, nrow = 8)
S <- (col(S) + row(S)) %% 2 + 1
S
colnames(S) <- LETTERS[LETTERS <= "H"]  # auch LETTERS[1:8] mГ¶glich
rownames(S) <- 8:1
S
?grepl
numerisch <- sample(1:10, size = 100, replace = TRUE)
numerisch
faktor <- factor(LETTERS[numerisch])
faktor
LETTERS[numerisch]
?substring
?splitstr
?strsplit
rechnungen <- c("8-1=7, 9 + 10 = 19, 2 - 5 = -3,11^2 = 121")
zeichen <- unlist(strsplit(rechnungen, split = ""))
colnames(S) <- LETTERS[LETTERS <= "H"]  # auch LETTERS[1:8] mГ¶glich
zeichnen
faktor <- factor(c(2, 5, 4, 5), levels = 2:5)
faktor
as.numeric(faktor)
levels(faktor)
as.numeric(levels(faktor))
as.numeric(levels(faktor))
mean(as.numeric(levels(faktor)))
load("C:/Users/Daniil/Desktop/data.RData")
load("C:/Users/Daniil/Desktop/data.RData")
str(sat)
head(sat)
str(sat)
sat[is.na(sat))] <- 0
sat[is.na(sat)] <- 0
warnings()
sat
str)s
str(sat)
sapply(sat, as.numeric)
str(sat)
load("C:/Users/Daniil/Desktop/data.RData")
?as.data.frame
levels(sat)
sapply(sat,levels(sat))
sapply(sat,levels(sat))
?levels
sapply(sat,levels)
sapply(sat,function(x) levels(x)[levels(x) == NA] <-0)
?droplevels
str(sat)
sapply(sat,levels)
head(sat)
load("C:/Users/Daniil/Desktop/data.RData")
head(sat)
str(sat)
sat[is.na(sat)] <- 0
sapply(sat,function(x) levels(x)[levels(x) == NA] <-0)
str(sat)
sapply(sat,levels)
head(sat)
geb.posix <- as.POSIXlt("1986-07-07 07:22:00 CET")
geb.posix$wday
f3 <- function(x) {
temp <- 1:10
invisible(x)
}
f2 <- function(x) {
temp <- 1:10
x
}
f2(1:3)
f3(1:3)
Sys.Date()
Sys.Date() - 1
Sys.time() - 1
Sys.Date() - 1
weekdands(Sys.Date() - 1)
weekands(Sys.Date() - 1)
weekdays(Sys.Date() - 1)
weekdays(Sys.time() - 1)
3.5 + 3.5 + 4.5 + 4
3.5 + 3.5 + 4.5 + 3.5
Sys.Date()
-1
Sys.Date() - 1
Sys.Date() - 2
difftime()
3.5 + 3.5 + 4.5 + 4.5
20 + 18 + 15.5  +15
20 + 18 + 15.5 + 15.5
20 + 18 + 15.5 + 16
-2/3 - sqrt(10)/3
1/3(sqrt(10)-2)
1/3*(sqrt(10)-2)
1/3*(-2-sqrt(10))
14/13 - (38416/28561 - 1372/507)/(10976/2197 + 196/39)
1 - (1 - 7/3)/(4 - 14/3)
setwd("C:/Users/Daniil/Desktop/Programming/R/Work/shiny_project/BTYDshiny")
