{
    "collab_server" : "",
    "contents" : "library(BTYD)\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(BTYDplus)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(tidyr)\n\ncdnow <- data.table(read.csv(file = 'cdnow_elog.csv', stringsAsFactors = F))\ncdnow <- cdnow[, date := as.Date(date, '%Y-%m-%d')]\ncdnow <- cdnow[, first := min(date), by='cust']\ncdnow <- arrange(cdnow,date)\n\n\ngrocery <- data.table(read.csv(file = 'grocery-elog.csv', stringsAsFactors = F))\ngrocery <- grocery[, date := as.Date(date, '%Y-%m-%d')]\ngrocery$first <- as.Date(grocery$first)\ngrocery <- arrange(grocery,date)\n\n\ndonations <- data.table(read.csv('donations-elog.csv', stringsAsFactors = F))\ndonations[, date := as.Date(date, format='%m/%d/%Y')]\ndonations[, first := min(date), by='cust']\ndonations <- arrange(donations,date)\n\n\n\nui <- fluidPage(\n    headerPanel('BTYDplus package'),\n    sidebarPanel(\n        helpText(\"Options to choose the dataset, the model and calibration period in %(optional).\"),\n        selectInput('Data','Select the dataset',choices = c('CDNOW','Donations','Grocery')),\n        selectInput('Model','Select the model',choices = c('ParetoNBD', 'BG/NBD', 'MBG/NBD', 'MBG/CNBD-k')),\n        sliderInput(\"cal_per\",value = 0.5,max = 0.90,min = 0.1,label = \"% of total data for calibration period\")\n    ),\n    mainPanel(tabsetPanel(\n        tabPanel(title = 'Descriptive Summary Statistic',\n                 h4('Descriptive Statistics'),\n                 tableOutput('descr_stats'),\n                 \n                 h4('Plot Of Timing Patterns'),\n                 plotOutput('tim_pat')),\n        tabPanel(title = 'Cohort Level Analysis',\n                 h4('Estimated Parameters '),\n                 tableOutput('est_param'),\n                 \n                 h4('Tracking Incremental & Cumulative Weekly'),\n                 plotOutput('incr_weekly'),\n                 plotOutput('cum_weekly'),\n                 \n                 h4('Frequency and Recency vs Holdout Transactions'),\n                 plotOutput('freq_trans'),\n                 plotOutput('rec_trans'),\n                 \n                 \n                 \n                 h4('distribution of P(alive)'),\n                 plotOutput('p_alive')),\n        \n        tabPanel(title = 'Customer Level Analysis',\n                 h4('Mean Absolute Error & Bias'),\n                 tableOutput('stats'),\n                 \n                 h4('Sufficient Statistic Matrix'),\n                 tableOutput('suf_mat'))\n    )\n    )\n    \n)\n\nserver <- function(input,output){\n    \n    data <- reactive({\n        cbs_cdnow <- elog2cbs(cdnow, units = 'week', T.cal = unique(cdnow$date)[length(unique(cdnow$date))*input$cal_per])\n        cbs_cdnow <- as.data.frame(cbs_cdnow)\n        \n        cbs_grocery <- elog2cbs(grocery, T.cal = unique(grocery$date)[length(unique(grocery$date))*input$cal_per], T.tot = as.Date('2007-12-31'))\n        cbs_grocery <- as.data.frame(cbs_grocery)\n        #Take the length of the unique dates in dataset and * on the number from 0.1 till 0.9 => new date for calibration period.\n        cbs_donations <- elog2cbs(donations, units='week', T.cal = unique(donations$date)[length(unique(donations$date))*input$cal_per], T.tot = as.Date('2006-07-01'))\n        \n        data <- list(cbs_cdnow,cbs_grocery,cbs_donations)\n    })\n    \n    output$descr_stats <- renderTable({\n        cbs_cdnow <- data()[[1]]\n        cbs_grocery <- data()[[2]]\n        cbs_donations <- data()[[3]]\n        #a)dataset\n        dataset <- c(\"CDs\",\"Grocery\",\"Donations\")\n        #b)Cohort size\n        coh.size <- c(nrow(cbs_cdnow),nrow(cbs_grocery),nrow(cbs_donations))\n        #c)Period length in weeks(Calibration)\n        per.length.cal <- c(round(max(cbs_cdnow$T.cal)),round(max(cbs_grocery$T.cal)),round(max(cbs_donations$T.cal)))\n        #d)Period length in weeks(holdout)\n        per.length.hold <- c(round(cbs_cdnow$T.star[1]),round(cbs_grocery$T.star[1]),round(cbs_donations$T.star[1]))\n        #e)share of inactive customer(calibr)\n        sh.in.cust.cal <- c(round(sum(cbs_cdnow$x == 0)/nrow(cbs_cdnow),2),round(sum(cbs_grocery$x == 0)/nrow(cbs_grocery),2),\n                            round(sum(cbs_donations$x == 0)/nrow(cbs_donations),2))\n        #f)share of inactive customer(holdout)\n        sh.in.cust.hold <- c(round(sum(cbs_cdnow$x.star == 0)/nrow(cbs_cdnow),2),round(sum(cbs_grocery$x.star == 0)/nrow(cbs_grocery),2),\n                             round(sum(cbs_donations$x.star == 0)/nrow(cbs_donations),2))\n        #g)share of customers with 4 or > transactions(calibration)\n        sh.cust.4.plus.cal <- c(round((sum(cbs_cdnow$x >=4)/nrow(cbs_cdnow)),2),round(sum((cbs_grocery$x >=4)/nrow(cbs_grocery)),2),round(sum((cbs_donations$x >=4)/nrow(cbs_donations)),2))\n        #h)share of customers with 4 or > transactions(holdout)\n        sh.cust.4.plus.hold <- c(round((sum(cbs_cdnow$x.star >=4)/nrow(cbs_cdnow)),2),round(sum((cbs_grocery$x.star >=4)/nrow(cbs_grocery)),2),round(sum((cbs_donations$x.star >=4)/nrow(cbs_donations)),2))\n        #i)mean 0f number of purchases(calibr)\n        num.purch.cal <- c(round(mean(cbs_cdnow$x),2),round(mean(cbs_grocery$x),2),round(mean(cbs_donations$x),2))\n        #j)mean 0f number of purchases(holdout)\n        num.purch.hold <- c(round(mean(cbs_cdnow$x.star),2),round(mean(cbs_grocery$x.star),2),round(mean(cbs_donations$x.star),2))\n        #k)mean 0f number of purchases active cust(calibr)\n        num.purch.cal.act <- c(round(mean(cbs_cdnow$x[cbs_cdnow$x>0]),2),round(mean(cbs_grocery$x[cbs_grocery$x>0]),2),round(mean(cbs_donations$x[cbs_donations$x>0]),2))\n        #l)mean 0f number of purchases active cust(hold)\n        num.purch.hold.act <- c(round(mean(cbs_cdnow$x.star[cbs_cdnow$x.star>0]),2),round(mean(cbs_grocery$x.star[cbs_grocery$x.star>0]),2),round(mean(cbs_donations$x.star[cbs_donations$x.star>0]),2))\n        #m)wheat\n        wheat <- c(round(estimateRegularity(cdnow, method = \"wheat\",plot = FALSE),2),round(estimateRegularity(grocery, method = \"wheat\",plot = FALSE),2),round(estimateRegularity(donations, method = \"wheat\",plot = FALSE),2))\n        #Table:\n        des_stat <- c()\n        des_stat<- cbind(des_stat ,dataset,coh.size,per.length.cal,per.length.hold,sh.in.cust.cal,sh.in.cust.hold,\n                         sh.cust.4.plus.cal,sh.cust.4.plus.hold,num.purch.cal,num.purch.hold,\n                         num.purch.cal.act,num.purch.hold.act,wheat)\n        des_stat <- as.data.frame(des_stat)\n        des_stat <- data.frame(lapply(des_stat, as.character), stringsAsFactors=FALSE)\n        d <- cbind(des_stat[1:2], do.call(cbind, lapply(c(3,5,7,9,11), function(i) do.call(paste, c(des_stat[i:(i+1)], sep=\"/\")))))\n        d <- cbind(d,wheat)\n        d <- as.data.frame(d)\n        \n        colnames(d) <- c(\"Dataset\",\"Cohort size\",\"Period length (Calibration/Holdout)\",\"Share of inactive customer(cal/hol)\",\n                         \"Share of customers with 4 or > transactions(cal/hol)\",\"Mean of ? of purchases(cal/hol)\",\n                         \"Mean of ? of purchases active cust(cal/hol)\",'wheat')\n        d\n    })\n    \n    output$tim_pat <- renderPlot({\n        if(input$Data == \"CDNOW\"){\n            plotTimingPatterns(cdnow, n = 30, T.cal = unique(cdnow$date)[length(unique(cdnow$date))*input$cal_per],\n                               headers = c(\"Calibration Period\", \"Holdout Period\"), title = \"\")\n        }else if(input$Data == \"Grocery\"){\n            plotTimingPatterns(grocery, n = 30, T.cal = unique(grocery$date)[length(unique(cdnow$date))*input$cal_per],\n                               headers = c(\"Calibration Period\", \"Holdout Period\"), title = \"\")\n            \n        }else if(input$Data == \"Donations\"){\n            plotTimingPatterns(donations, n = 30, T.cal = unique(donations$date)[length(unique(cdnow$date))*input$cal_per],\n                               headers = c(\"Calibration Period\", \"Holdout Period\"), title = \"\")\n            \n        }\n        \n    })\n    \n    output$p_alive <- renderPlot({\n        if(input$Data == \"CDNOW\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_cdnow,max.param.value = 100)\n                palive.pnbd <- BTYD::pnbd.PAlive(params = params.pnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                plot <- ggplot(as.data.frame(palive.pnbd),aes(x=palive.pnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }else if(input$Model == \"BG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_cdnow)\n                palive.bgnbd <- BTYD::bgnbd.PAlive(params = params.bgnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                plot <- ggplot(as.data.frame(palive.bgnbd),aes(x=palive.bgnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_cdnow)\n                palive.mbgnbd <- mbgcnbd.PAlive(params = params.mbgnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                plot <- ggplot(as.data.frame(palive.mbgnbd),aes(x=palive.mbgnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_cdnow)\n                palive.mbgcnbd <- mbgcnbd.PAlive(params = params.mbgcnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                plot <- ggplot(as.data.frame(palive.mbgcnbd),aes(x=palive.mbgcnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }\n        }else if(input$Data == \"Grocery\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_grocery <- data()[[2]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_grocery,max.param.value = 100)\n                palive.pnbd <- BTYD::pnbd.PAlive(params = params.pnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                plot <- ggplot(as.data.frame(palive.pnbd),aes(x=palive.pnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }else if(input$Model == \"BG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_grocery)\n                palive.bgnbd <- BTYD::bgnbd.PAlive(params = params.bgnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                plot <- ggplot(as.data.frame(palive.bgnbd),aes(x=palive.bgnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_grocery)\n                palive.mbgnbd <- mbgcnbd.PAlive(params = params.mbgnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                plot <- ggplot(as.data.frame(palive.mbgnbd),aes(x=palive.mbgnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_grocery)\n                palive.mbgcnbd <- mbgcnbd.PAlive(params = params.mbgcnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                plot <- ggplot(as.data.frame(palive.mbgcnbd),aes(x=palive.mbgcnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }\n        }else if(input$Data == \"Donations\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_donations <- data()[[3]]\n                ##works very slow\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_donations,max.param.value = 100)\n                palive.pnbd <- BTYD::pnbd.PAlive(params = params.pnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                plot <- ggplot(as.data.frame(palive.pnbd),aes(x=palive.pnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }else if(input$Model == \"BG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_donations)\n                palive.bgnbd <- BTYD::bgnbd.PAlive(params = params.bgnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                plot <- ggplot(as.data.frame(palive.bgnbd),aes(x=palive.bgnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_donations)\n                palive.mbgnbd <- mbgcnbd.PAlive(params = params.mbgnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                plot <- ggplot(as.data.frame(palive.mbgnbd),aes(x=palive.mbgnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_donations <- data()[[3]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_donations)\n                palive.mbgcnbd <- mbgcnbd.PAlive(params = params.mbgcnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                plot <- ggplot(as.data.frame(palive.mbgcnbd),aes(x=palive.mbgcnbd))+\n                    geom_histogram(binwidth =0.01,colour=\"black\",fill=\"orange\")+\n                    ylab(\"Number of Customers\")+\n                    xlab(\"Probability Customer is 'Live'\")+\n                    theme_minimal()\n                plot\n            }\n        }\n    })\n    \n    output$freq_trans <-renderPlot({\n        if(input$Data == \"CDNOW\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_cdnow,max.param.value = 100)\n                pnbd.PlotFreqVsConditionalExpectedFrequency(params.pnbd,cbs_cdnow$T.star[1],cbs_cdnow,cbs_cdnow$x.star,censor =7)\n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_cdnow)\n                bgnbd.PlotFreqVsConditionalExpectedFrequency(params.bgnbd,cbs_cdnow$T.star[1],cbs_cdnow,cbs_cdnow$x.star,censor =7)\n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_cdnow)\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_cdnow)\n                \n            }\n        }else if(input$Data == \"Grocery\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_grocery <- data()[[2]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_grocery,max.param.value = 100)\n                pnbd.PlotFreqVsConditionalExpectedFrequency(params.pnbd,cbs_grocery$T.star[1],cbs_grocery,cbs_grocery$x.star,censor =7)\n            }else if(input$Model == \"BG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_grocery)\n                bgnbd.PlotFreqVsConditionalExpectedFrequency(params.bgnbd,cbs_grocery$T.star[1],cbs_grocery,cbs_grocery$x.star,censor =7)\n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_grocery)\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_grocery)\n                \n            }\n        }else if(input$Data == \"Donations\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_donations <- data()[[3]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_donations,max.param.value = 100)\n                pnbd.PlotFreqVsConditionalExpectedFrequency(params.pnbd,cbs_donations$T.star[1],cbs_donations,cbs_donations$x.star,censor =7)\n            }else if(input$Model == \"BG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_donations)\n                bgnbd.PlotFreqVsConditionalExpectedFrequency(params.bgnbd,cbs_donations$T.star[1],cbs_donations,cbs_donations$x.star,censor =7)\n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_donations)\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_donations <- data()[[3]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_donations)\n                \n            }\n        }\n    })\n    \n    \n    output$incr_weekly <-renderPlot({\n        if(input$Data == \"CDNOW\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_cdnow,max.param.value = 100)\n                pnbd.PlotTrackingInc(params.pnbd,cbs_cdnow$T.cal,T.tot = 78,actual.inc.tracking.data =elog2inc(cdnow))\n                \n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_cdnow)\n                bgnbd.PlotTrackingInc(params.bgnbd,cbs_cdnow$T.cal,T.tot = 78,actual.inc.tracking.data =elog2inc(cdnow))\n                \n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_cdnow)\n                mbgcnbd.PlotTrackingInc(params.mbgnbd,cbs_cdnow$T.cal,T.tot = 78,actual.inc.tracking.data =elog2inc(cdnow))\n                \n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_cdnow)\n                mbgcnbd.PlotTrackingInc(params.mbgcnbd,cbs_cdnow$T.cal,T.tot = 78,actual.inc.tracking.data =elog2inc(cdnow))\n                \n            }\n        }else if(input$Data == \"Grocery\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_grocery <- data()[[2]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_grocery,max.param.value = 100)\n                pnbd.PlotTrackingInc(params.pnbd,cbs_grocery$T.cal,T.tot = 104,actual.inc.tracking.data =elog2inc(grocery))\n                \n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_grocery)\n                bgnbd.PlotTrackingInc(params.bgnbd,cbs_grocery$T.cal,T.tot = 104,actual.inc.tracking.data =elog2inc(grocery))\n                \n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_grocery)\n                mbgcnbd.PlotTrackingInc(params.mbgnbd,cbs_grocery$T.cal,T.tot = 104,actual.inc.tracking.data =elog2inc(grocery))\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_grocery)\n                mbgcnbd.PlotTrackingInc(params.mbgcnbd,cbs_grocery$T.cal,T.tot = 104,actual.inc.tracking.data =elog2inc(grocery))\n                \n            }\n        }else if(input$Data == \"Donations\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_donations <- data()[[3]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_donations,max.param.value = 100)\n                pnbd.PlotTrackingInc(params.pnbd,cbs_donations$T.cal,T.tot = 234,actual.inc.tracking.data =elog2inc(donations))\n                \n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_donations)\n                bgnbd.PlotTrackingInc(params.bgnbd,cbs_donations$T.cal,T.tot = 234,actual.inc.tracking.data =elog2inc(donations))\n                \n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_donations)\n                mbgcnbd.PlotTrackingInc(params.mbgnbd,cbs_donations$T.cal,T.tot = 234,actual.inc.tracking.data =elog2inc(donations))\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_donations <- data()[[3]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_donations)\n                mbgcnbd.PlotTrackingInc(params.mbgcnbd,cbs_donations$T.cal,T.tot = 234,actual.inc.tracking.data =elog2inc(donations))\n                \n            }\n        }\n    })\n    \n    output$cum_weekly <- renderPlot({\n        if(input$Data == \"CDNOW\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_cdnow,max.param.value = 100)\n                pnbd.PlotTrackingCum(params.pnbd,cbs_cdnow$T.cal,T.tot = 78,actual.cu.tracking.data =elog2cum(cdnow))\n                \n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_cdnow)\n                bgnbd.PlotTrackingCum(params.bgnbd,cbs_cdnow$T.cal,T.tot = 78,actual.cu.tracking.data =elog2cum(cdnow))\n                \n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_cdnow)\n                mbgcnbd.PlotTrackingCum(params.mbgnbd,cbs_cdnow$T.cal,T.tot = 78,actual.cu.tracking.data =elog2cum(cdnow))\n                \n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_cdnow)\n                mbgcnbd.PlotTrackingCum(params.mbgcnbd,cbs_cdnow$T.cal,T.tot = 78,actual.cu.tracking.data =elog2cum(cdnow))\n                \n            }\n        }else if(input$Data == \"Grocery\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_grocery <- data()[[2]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_grocery,max.param.value = 100)\n                pnbd.PlotTrackingCum(params.pnbd,cbs_grocery$T.cal,T.tot = 104,actual.cu.tracking.data =elog2cum(grocery))\n                \n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_grocery)\n                bgnbd.PlotTrackingCum(params.bgnbd,cbs_grocery$T.cal,T.tot = 104,actual.cu.tracking.data =elog2cum(grocery))\n                \n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_grocery)\n                mbgcnbd.PlotTrackingCum(params.mbgnbd,cbs_grocery$T.cal,T.tot = 104,actual.cu.tracking.data =elog2cum(grocery))\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_grocery)\n                mbgcnbd.PlotTrackingCum(params.mbgcnbd,cbs_grocery$T.cal,T.tot = 104,actual.cu.tracking.data =elog2cum(grocery))\n                \n            }\n        }else if(input$Data == \"Donations\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_donations <- data()[[3]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_donations,max.param.value = 100)\n                pnbd.PlotTrackingCum(params.pnbd,cbs_donations$T.cal,T.tot = 234,actual.cu.tracking.data =elog2cum(donations))\n                \n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_donations)\n                bgnbd.PlotTrackingCum(params.bgnbd,cbs_donations$T.cal,T.tot = 234,actual.cu.tracking.data =elog2cum(donations))\n                \n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_donations)\n                mbgcnbd.PlotTrackingCum(params.mbgnbd,cbs_donations$T.cal,T.tot = 234,actual.cu.tracking.data =elog2cum(donations))\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_donations <- data()[[3]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_donations)\n                mbgcnbd.PlotTrackingCum(params.mbgcnbd,cbs_donations$T.cal,T.tot = 234,actual.cu.tracking.data =elog2cum(donations))\n                \n            }\n        }\n        \n    })\n    \n    output$est_param <- renderTable({\n        if(input$Data == \"CDNOW\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_cdnow,max.param.value = 100)\n                palive.pnbd <- BTYD::pnbd.PAlive(params = params.pnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_cdnow$t.x),mean(cbs_cdnow$litt),mean(palive.pnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_cdnow)\n                palive.bgnbd <- BTYD::bgnbd.PAlive(params = params.bgnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_cdnow$t.x),mean(cbs_cdnow$litt),mean(palive.bgnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_cdnow)\n                palive.mbgnbd <- mbgcnbd.PAlive(params = params.mbgnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_cdnow$t.x),mean(cbs_cdnow$litt),mean(palive.mbgnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_cdnow)\n                palive.mbgcnbd <- mbgcnbd.PAlive(params = params.mbgcnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_cdnow$t.x),mean(cbs_cdnow$litt),mean(palive.mbgcnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n            }\n        }else if(input$Data == \"Grocery\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_grocery <- data()[[2]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_grocery,max.param.value = 100)\n                palive.pnbd <- BTYD::pnbd.PAlive(params = params.pnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_grocery$t.x),mean(cbs_grocery$litt),mean(palive.pnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_grocery)\n                palive.bgnbd <- BTYD::bgnbd.PAlive(params = params.bgnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_grocery$t.x),mean(cbs_grocery$litt),mean(palive.bgnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_grocery)\n                palive.mbgnbd <- mbgcnbd.PAlive(params = params.mbgnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_grocery$t.x),mean(cbs_grocery$litt),mean(palive.mbgnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_grocery)\n                palive.mbgcnbd <- mbgcnbd.PAlive(params = params.mbgcnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_grocery$t.x),mean(cbs_grocery$litt),mean(palive.mbgcnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n            }\n        }else if(input$Data == \"Donations\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_donations <- data()[[3]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_donations,max.param.value = 100)\n                palive.pnbd <- BTYD::pnbd.PAlive(params = params.pnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_donations$t.x),mean(cbs_donations$litt),mean(palive.pnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_donations)\n                palive.bgnbd <- BTYD::bgnbd.PAlive(params = params.bgnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_donations$t.x),mean(cbs_donations$litt),mean(palive.bgnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_donations)\n                palive.mbgnbd <- mbgcnbd.PAlive(params = params.mbgnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_donations$t.x),mean(cbs_donations$litt),mean(palive.mbgnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_donations <- data()[[3]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_donations)\n                palive.mbgcnbd <- mbgcnbd.PAlive(params = params.mbgcnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                d <- as.data.frame(cbind(mean(cbs_donations$t.x),mean(cbs_donations$litt),mean(palive.mbgcnbd)))\n                colnames(d) <- c(\"mean(lifetime)\",\"mean(itt)\",\"mean(palive)\")\n                d\n            }\n        }   \n        \n        \n    })\n    \n    output$rec_trans <-renderPlot({\n        if(input$Data == \"CDNOW\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_cdnow,max.param.value = 100)\n                pnbd.PlotRecVsConditionalExpectedFrequency(params.pnbd,cbs_cdnow,cbs_cdnow$T.star[1],cbs_cdnow$x.star)\n                \n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_cdnow)\n                bgnbd.PlotRecVsConditionalExpectedFrequency(params.bgnbd,cbs_cdnow,cbs_cdnow$T.star[1],cbs_cdnow$x.star)\n                \n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_cdnow)\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_cdnow)\n                \n            }\n        }else if(input$Data == \"Grocery\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_grocery <- data()[[2]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_grocery,max.param.value = 100)\n                pnbd.PlotRecVsConditionalExpectedFrequency(params.pnbd,cbs_grocery,cbs_grocery$T.star[1],cbs_grocery$x.star)\n                \n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_grocery)\n                bgnbd.PlotRecVsConditionalExpectedFrequency(params.bgnbd,cbs_grocery,cbs_grocery$T.star[1],cbs_grocery$x.star)\n                \n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_grocery)\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_grocery)\n                \n            }\n            \n        }else if(input$Data == \"Donations\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_donations <- data()[[3]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_donations,max.param.value = 100)\n                pnbd.PlotRecVsConditionalExpectedFrequency(params.pnbd,cbs_donations,cbs_donations$T.star[1],cbs_donations$x.star)\n                \n                \n            }else if(input$Model == \"BG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_donations)\n                bgnbd.PlotRecVsConditionalExpectedFrequency(params.bgnbd,cbs_donations,cbs_donations$T.star[1],cbs_donations$x.star)\n                \n                \n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_donations)\n                \n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_donations <- data()[[3]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_donations)\n                \n            }\n        }\n        \n    })\n    ##no sales data in Donations and Grocery\n    output$suf_mat <- renderTable({\n        if(input$Data == \"CDNOW\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_cdnow,max.param.value = 100)\n                cbs_cdnow$palive.pnbd <- BTYD::pnbd.PAlive(params = params.pnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                cbs_cdnow$xstar.pnbd <- BTYD::pnbd.ConditionalExpectedTransactions(\n                    params  = params.pnbd,\n                    T.star  = cbs_cdnow$T.star,\n                    x       = cbs_cdnow$x,\n                    t.x     = cbs_cdnow$t.x,\n                    T.cal   = cbs_cdnow$T.cal)\n                cbs_cdnow <- arrange(cbs_cdnow,desc(xstar.pnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_cdnow),cbs_cdnow[1179:1183,],tail(cbs_cdnow)))\n                data_cbs\n            }else if(input$Model == \"BG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_cdnow)\n                cbs_cdnow$palive.bgnbd <- BTYD::bgnbd.PAlive(params = params.bgnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                cbs_cdnow$xstar.bgnbd <- BTYD::bgnbd.ConditionalExpectedTransactions(\n                    params  = params.bgnbd,\n                    T.star  = cbs_cdnow$T.star,\n                    x       = cbs_cdnow$x,\n                    t.x     = cbs_cdnow$t.x,\n                    T.cal   = cbs_cdnow$T.cal)\n                cbs_cdnow <- arrange(cbs_cdnow,desc(xstar.bgnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_cdnow),cbs_cdnow[1179:1183,],tail(cbs_cdnow)))\n                data_cbs\n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_cdnow)\n                cbs_cdnow$palive.mbgnbd <- mbgcnbd.PAlive(params = params.mbgnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                cbs_cdnow$xstar.mbgnbd <- mbgcnbd.ConditionalExpectedTransactions(\n                    params  = params.mbgnbd,\n                    T.star  = cbs_cdnow$T.star,\n                    x       = cbs_cdnow$x,\n                    t.x     = cbs_cdnow$t.x,\n                    T.cal   = cbs_cdnow$T.cal)\n                cbs_cdnow <- arrange(cbs_cdnow,desc(xstar.mbgnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_cdnow),cbs_cdnow[1179:1183,],tail(cbs_cdnow)))\n                data_cbs\n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_cdnow <- data()[[1]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_cdnow)\n                cbs_cdnow$palive.mbgcnbd <- mbgcnbd.PAlive(params = params.mbgcnbd, cbs_cdnow$x, cbs_cdnow$t.x, cbs_cdnow$T.cal)\n                cbs_cdnow$xstar.mbgnbd <- mbgcnbd.ConditionalExpectedTransactions(\n                    params  = params.mbgcnbd,\n                    T.star  = cbs_cdnow$T.star,\n                    x       = cbs_cdnow$x,\n                    t.x     = cbs_cdnow$t.x,\n                    T.cal   = cbs_cdnow$T.cal)\n                \n                cbs_cdnow <- arrange(cbs_cdnow,desc(xstar.mbgnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_cdnow),cbs_cdnow[1179:1183,],tail(cbs_cdnow)))\n                data_cbs\n            }\n        }else if(input$Data == \"Grocery\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_grocery <- data()[[2]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_grocery,max.param.value = 100)\n                cbs_grocery$palive.pnbd <- BTYD::pnbd.PAlive(params = params.pnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                cbs_grocery$xstar.pnbd <- BTYD::pnbd.ConditionalExpectedTransactions(\n                    params  = params.pnbd,\n                    T.star  = cbs_grocery$T.star,\n                    x       = cbs_grocery$x,\n                    t.x     = cbs_grocery$t.x,\n                    T.cal   = cbs_grocery$T.cal)\n                cbs_grocery <- arrange(cbs_grocery,desc(xstar.pnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_grocery),cbs_grocery[763:767,],tail(cbs_grocery)))\n                data_cbs\n            }else if(input$Model == \"BG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_grocery)\n                cbs_grocery$palive.bgnbd <- BTYD::bgnbd.PAlive(params = params.bgnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                cbs_grocery$xstar.bgnbd  <- BTYD::bgnbd.ConditionalExpectedTransactions(\n                    params  = params.bgnbd ,\n                    T.star  = cbs_grocery$T.star,\n                    x       = cbs_grocery$x,\n                    t.x     = cbs_grocery$t.x,\n                    T.cal   = cbs_grocery$T.cal)\n                cbs_grocery <- arrange(cbs_grocery,desc(xstar.bgnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_grocery),cbs_grocery[763:767,],tail(cbs_grocery)))\n                data_cbs\n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_grocery)\n                cbs_grocery$palive.mbgnbd <- mbgcnbd.PAlive(params = params.mbgnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                cbs_grocery$xstar.mbcnbd  <- mbgcnbd.ConditionalExpectedTransactions(\n                    params  = params.mbgnbd ,\n                    T.star  = cbs_grocery$T.star,\n                    x       = cbs_grocery$x,\n                    t.x     = cbs_grocery$t.x,\n                    T.cal   = cbs_grocery$T.cal)\n                cbs_grocery <- arrange(cbs_grocery,desc(xstar.mbcnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_grocery),cbs_grocery[763:767,],tail(cbs_grocery)))\n                data_cbs\n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_grocery <- data()[[2]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_grocery)\n                cbs_grocery$palive.mbgcnbd <- mbgcnbd.PAlive(params = params.mbgcnbd, cbs_grocery$x, cbs_grocery$t.x, cbs_grocery$T.cal)\n                cbs_grocery$xstar.mbgcnbd  <- mbgcnbd.ConditionalExpectedTransactions(\n                    params  = params.mbgcnbd ,\n                    T.star  = cbs_grocery$T.star,\n                    x       = cbs_grocery$x,\n                    t.x     = cbs_grocery$t.x,\n                    T.cal   = cbs_grocery$T.cal)\n                cbs_grocery <- arrange(cbs_grocery,desc(xstar.mbgcnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_grocery),cbs_grocery[763:767,],tail(cbs_grocery)))\n                data_cbs\n            }\n        }else if(input$Data == \"Donations\"){\n            if(input$Model == \"ParetoNBD\"){\n                cbs_donations <- data()[[3]]\n                params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_donations,max.param.value = 100)\n                cbs_donations$palive.pnbd <- BTYD::pnbd.PAlive(params = params.pnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                cbs_donations$xstar.pnbd <- BTYD::pnbd.ConditionalExpectedTransactions(\n                    params  = params.pnbd,\n                    T.star  = cbs_donations$T.star,\n                    x       = cbs_donations$x,\n                    t.x     = cbs_donations$t.x,\n                    T.cal   = cbs_donations$T.cal)\n                cbs_donations <- arrange(cbs_donations,desc(xstar.pnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_donations),cbs_donations[10583:10587,],tail(cbs_donations)))\n                data_cbs <- arrange(data.cbs,xstar.pnbd)\n                data_cbs\n            }else if(input$Model == \"BG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_donations)\n                cbs_donations$palive.bgnbd <- BTYD::bgnbd.PAlive(params = params.bgnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                cbs_donations$xstar.bgnbd <- BTYD::bgnbd.ConditionalExpectedTransactions(\n                    params  = params.bgnbd,\n                    T.star  = cbs_donations$T.star,\n                    x       = cbs_donations$x,\n                    t.x     = cbs_donations$t.x,\n                    T.cal   = cbs_donations$T.cal)\n                cbs_donations <- arrange(cbs_donations,desc(xstar.bgnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_donations),cbs_donations[10583:10587,],tail(cbs_donations)))\n                data_cbs\n            }else if(input$Model == \"MBG/NBD\"){\n                cbs_donations <- data()[[3]]\n                params.mbgnbd <- mbgnbd.EstimateParameters(cbs_donations)\n                cbs_donations$palive.mbgnbd <- mbgcnbd.PAlive(params = params.mbgnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                cbs_donations$xstar.mbgnbd <- mbgcnbd.ConditionalExpectedTransactions(\n                    params  = params.mbgnbd,\n                    T.star  = cbs_donations$T.star,\n                    x       = cbs_donations$x,\n                    t.x     = cbs_donations$t.x,\n                    T.cal   = cbs_donations$T.cal)\n                cbs_donations <- arrange(cbs_donations,desc(xstar.mbgnbd))\n                data_cbs <- as.data.frame(rbind(head(cbs_donations),cbs_donations[10583:10587,],tail(cbs_donations)))\n                data_cbs\n            }else if(input$Model == \"MBG/CNBD-k\"){\n                cbs_donations <- data()[[3]]\n                params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_donations)\n                cbs_donations$palive.mbgcnbd <- mbgcnbd.PAlive(params = params.mbgcnbd, cbs_donations$x, cbs_donations$t.x, cbs_donations$T.cal)\n                cbs_donations$xstar.mbgcnbd <- mbgcnbd.ConditionalExpectedTransactions(\n                    params  = params.mbgcnbd,\n                    T.star  = cbs_donations$T.star,\n                    x       = cbs_donations$x,\n                    t.x     = cbs_donations$t.x,\n                    T.cal   = cbs_donations$T.cal)\n                cbs_donations <- arrange(cbs_donations,desc(xstar.mbgcnbd))\n                data_cbs<- as.data.frame(rbind(head(cbs_donations),cbs_donations[10583:10587,],tail(cbs_donations)))\n                data_cbs\n                \n            }\n        }\n    })\n    output$stats <- renderTable({\n        measures <- c(\n            \"MAE\" = function(a, f) mean(abs(a - f)),\n            \"MSLE\" = function(a, f) mean(((log(a + 1) - log(f + 1)))^2),\n            \"BIAS\" = function(a, f) sum(f)/sum(a) )\n        models <- c(\n            \"NBD\" = \"nbd\",\n            \"Pareto/NBD\" = \"pnbd\",\n            \"BG/CNBD-k\" = \"bgcnbd\",\n            \"MBG/CNBD-k\" = \"mbgcnbd\")\n        \n        if(input$Data == \"CDNOW\"){\n            cbs_cdnow <- data()[[1]]\n            params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_cdnow,max.param.value = 100)\n            cbs_cdnow$xstar.pnbd <- BTYD::pnbd.ConditionalExpectedTransactions(\n                params  = params.pnbd,\n                T.star  = cbs_cdnow$T.star,\n                x       = cbs_cdnow$x,\n                t.x     = cbs_cdnow$t.x,\n                T.cal   = cbs_cdnow$T.cal)\n            params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_cdnow)\n            cbs_cdnow$xstar.bgnbd <- BTYD::bgnbd.ConditionalExpectedTransactions(\n                params  = params.bgnbd,\n                T.star  = cbs_cdnow$T.star,\n                x       = cbs_cdnow$x,\n                t.x     = cbs_cdnow$t.x,\n                T.cal   = cbs_cdnow$T.cal)\n            params.mbgnbd <- mbgnbd.EstimateParameters(cbs_cdnow)\n            cbs_cdnow$xstar.mbgnbd <- mbgcnbd.ConditionalExpectedTransactions(\n                params  = params.mbgnbd,\n                T.star  = cbs_cdnow$T.star,\n                x       = cbs_cdnow$x,\n                t.x     = cbs_cdnow$t.x,\n                T.cal   = cbs_cdnow$T.cal)\n            params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_cdnow)\n            cbs_cdnow$xstar.mbgnbd <- mbgcnbd.ConditionalExpectedTransactions(\n                params  = params.mbgcnbd,\n                T.star  = cbs_cdnow$T.star,\n                x       = cbs_cdnow$x,\n                t.x     = cbs_cdnow$t.x,\n                T.cal   = cbs_cdnow$T.cal)\n            sapply(measures, function(measure) {\n                sapply(models, function(model) {\n                    err <- do.call(measure, list(a = cbs_cdnow$x.star, f = cbs_cdnow[[paste0(\"xstar.\", model)]]))\n                    round(err, 3)\n                })\n            })\n            \n        }else if(input$Data == \"Grocery\"){\n            cbs_grocery <- data()[[2]]\n            params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_grocery,max.param.value = 100)\n            cbs_grocery$xstar.pnbd <- BTYD::pnbd.ConditionalExpectedTransactions(\n                params  = params.pnbd,\n                T.star  = cbs_grocery$T.star,\n                x       = cbs_grocery$x,\n                t.x     = cbs_grocery$t.x,\n                T.cal   = cbs_grocery$T.cal)\n            params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_grocery)\n            cbs_grocery$xstar.bgnbd  <- BTYD::bgnbd.ConditionalExpectedTransactions(\n                params  = params.bgnbd ,\n                T.star  = cbs_grocery$T.star,\n                x       = cbs_grocery$x,\n                t.x     = cbs_grocery$t.x,\n                T.cal   = cbs_grocery$T.cal)\n            params.mbgnbd <- mbgnbd.EstimateParameters(cbs_grocery)\n            cbs_grocery$xstar.mbcnbd  <- mbgcnbd.ConditionalExpectedTransactions(\n                params  = params.mbgnbd ,\n                T.star  = cbs_grocery$T.star,\n                x       = cbs_grocery$x,\n                t.x     = cbs_grocery$t.x,\n                T.cal   = cbs_grocery$T.cal)\n            params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_grocery)\n            cbs_grocery$xstar.mbgcnbd  <- mbgcnbd.ConditionalExpectedTransactions(\n                params  = params.mbgcnbd ,\n                T.star  = cbs_grocery$T.star,\n                x       = cbs_grocery$x,\n                t.x     = cbs_grocery$t.x,\n                T.cal   = cbs_grocery$T.cal)\n            sapply(measures, function(measure) {\n                sapply(models, function(model) {\n                    err <- do.call(measure, list(a = cbs_grocery$x.star, f = cbs_grocery[[paste0(\"xstar.\", model)]]))\n                    round(err, 3)\n                })\n            })\n            \n        }else if(input$Data == \"Donations\"){\n            cbs_donations <- data()[[3]]\n            params.pnbd <- BTYD::pnbd.EstimateParameters(cbs_donations,max.param.value = 100)\n            cbs_donations$xstar.pnbd <- BTYD::pnbd.ConditionalExpectedTransactions(\n                params  = params.pnbd,\n                T.star  = cbs_donations$T.star,\n                x       = cbs_donations$x,\n                t.x     = cbs_donations$t.x,\n                T.cal   = cbs_donations$T.cal)\n            params.bgnbd <- BTYD::bgnbd.EstimateParameters(cbs_donations)\n            cbs_donations$xstar.bgnbd <- BTYD::bgnbd.ConditionalExpectedTransactions(\n                params  = params.bgnbd,\n                T.star  = cbs_donations$T.star,\n                x       = cbs_donations$x,\n                t.x     = cbs_donations$t.x,\n                T.cal   = cbs_donations$T.cal)\n            params.mbgnbd <- mbgnbd.EstimateParameters(cbs_donations)\n            cbs_donations$xstar.mbgnbd <- mbgcnbd.ConditionalExpectedTransactions(\n                params  = params.mbgnbd,\n                T.star  = cbs_donations$T.star,\n                x       = cbs_donations$x,\n                t.x     = cbs_donations$t.x,\n                T.cal   = cbs_donations$T.cal)\n            \n            params.mbgcnbd <- mbgcnbd.EstimateParameters(cbs_donations)\n            cbs_donations$xstar.mbgcnbd <- mbgcnbd.ConditionalExpectedTransactions(\n                params  = params.mbgcnbd,\n                T.star  = cbs_donations$T.star,\n                x       = cbs_donations$x,\n                t.x     = cbs_donations$t.x,\n                T.cal   = cbs_donations$T.cal)\n            sapply(measures, function(measure) {\n                sapply(models, function(model) {\n                    err <- do.call(measure, list(a = cbs_donations$x.star, f = cbs_donations[[paste0(\"xstar.\", model)]]))\n                    round(err, 3)\n                })\n            })\n        }\n        \n    })\n}\n\nshinyApp(ui = ui, server = server)\n",
    "created" : 1479467303518.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "468780148",
    "id" : "240E1E69",
    "lastKnownWriteTime" : 1478188630,
    "last_content_update" : 1478188630,
    "path" : "C:/Users/Daniil/Desktop/Programming/R/Work/shiny_project/BTYD_PLUS_FINAL_VERSION.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}